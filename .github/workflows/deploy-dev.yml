name: deploy development

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup AWS CLI for "gh actions" user
        id: ghactions
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: arn:aws:iam::464919712823:role/admin-role-gh-actions
          role-duration-seconds: 1200
          role-session-name: GithubActionsSession
      
      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "<>"

      # - name: Upload working code to s3
      #   id: s3upload
      #   if: github.event_name == 'pull_request'
      #   uses: actions/checkout@v3
      #   with:
      #     repository: "ashishjullia/terraform-w-rollback"
      #     fetch-depth: '0'
      #     ref: 'main'
      #     path: s3-upload

      - name: Capture working code
        id: for-release
        # if: github.event_name == 'pull_request'
        uses: actions/checkout@v3
        with:
          repository: "ashishjullia/terraform-w-rollback"
          fetch-depth: '0'
          ref: 'main'
          path: for-release
      
      # - name: Copy current working code to s3 bucket
      #   if: github.event_name == 'pull_request'
      #   run: |
      #     cd s3-upload
      #     ls
      #     rm -rf .git
      #     # zip -r working-code.zip .
      #     # aws s3 cp working-code.zip s3://tf-test-s3-ashish/working-code/
      #     date '+%Y%m%d%H%M%S' | xargs -t -I % sh -c '{ git tag "release-%"; gh release create "release-%" --generate-notes --target main; }'

      - name: Get Terraform Version
        run: |
          echo "TF_VERSION=$(head -n 1 .terraform-version)" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: $TF_VERSION

      # Check Terraform configuration files to a canonical format and style
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      # validates the configuration files in a directory, referring only to the configuration 
      # and not accessing any remote services such as remote state, provider APIs, etc.
      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        # if: github.event_name == 'pull_request'
        if: "steps.init.outcome == 'success' && github.event_name == 'pull_request'"
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply -auto-approve -input=false
        continue-on-error: true

      - name: If apply successful, create a release
        id: release
        if: steps.apply.outcome == 'success'
        run: |
          cd for-release
          ls
          rm -rf .git
          date '+%Y%m%d%H%M%S' | xargs -t -I % sh -c '{ git tag "release-%"; gh release create "release-%" --generate-notes --target main; }'
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: latest-code directory
        id: latest-code
        if: steps.apply.outcome == 'failure'
        uses: actions/checkout@v3
        with:
          # repository: 
          fetch-depth: '0'
          path: latest-code
      
      - name: new directory
        uses: actions/checkout@v3
        id: new
        if: steps.latest-code.outcome == 'success'
        with:
          # repository: 
          # fetch-depth: 'HEAD~1'
          path: new
      
      - name: Setup Code and Rollback
        id: rollback
        if: steps.new.outcome == 'success'
        run: |
          # mkdir working-code
          # aws s3 cp s3://tf-test-s3-ashish/working-code/working-code.zip ./working-code/
          # latest_release=$(gh release list | awk '{print $1}' | head -1)
          # gh release list | awk '{print $1}' | head -1 | xargs -t -I % sh -c '{ gh release download % --archive=zip;}'
          # gh release list | awk '{print $1}' | head -1 | xargs -t -I % sh -c '{ gh release download % --archive=zip; mv terraform-w-rollback-%.zip working-code.zip;}'

          gh release list | awk '{print $1}' | head -1 | xargs -t -I % sh -c '{ gh release download % --archive=zip; unzip -q terraform-w-rollback-%.zip; mv terraform-w-rollback-% working-code;}'
          cd working-code

          # unzip -q working-code.zip
          # rm working-code.zip
          # git config user.name "GitHub Actions Bot"
          # git config user.email "<>"
          # git checkout main

          cp ../new/provider.tf .
          ls -la
          terraform init
          terraform plan -no-color -input=false -out=rollback.tfplan
          # terraform init
          # terraform apply -auto-approve -input=false
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: trstringer/manual-approval@v1
        if: steps.rollback.outcome == 'success'
        id: approval
        with:
          secret: ${{ secrets.TOKEN }}
          approvers: ashishjullia

      - name: Approved Rollback 
        if: steps.approval.outcome == 'success'
        run: |
          cd working-code
          terraform init
          # terraform apply rollback.tfplan -auto-approve -input=false 
          terraform apply rollback.tfplan
      
      - name: create pull request
        id: pullrequest
        if: steps.rollback.outcome == 'success'
        run: |
          rollback_time=$(date '+%Y-%m-%d-%H-%M-%S')
          
          # mkdir intermediate-code-$rollback_time

          gh release list | awk '{print $1}' | head -1 | xargs -t -I % sh -c '{ gh release download % --archive=zip ; unzip -q terraform-w-rollback-%.zip ; mv terraform-w-rollback-% intermediate-code ; rm terraform-w-rollback-%.zip ; }'
          
          # aws s3 cp s3://tf-test-s3-ashish/working-code/working-code.zip ./intermediate-code-$rollback_time/

          # cd intermediate-code
          # unzip -q working-code.zip
          # rm working-code.zip
          
          # cd ..

          mkdir to-be-deleted
          cp -ar ./latest-code/. ./to-be-deleted/
          rm -rf latest-code

          mkdir latest-code

          #mv ./latest-code/.* ./to-be-deleted/
          
          mv ./to-be-deleted/.git ./latest-code/

          cp -ar ./intermediate-code/. ./latest-code/

          cd latest-code

          git checkout -b rollback-at-$rollback_time
          # git pull
          date > exact-rollback-time
          git add .
          git commit -m "rollback"
          git push origin rollback-at-$rollback_time
          gh pr create -B main -H rollback-at-$rollback_time --title "Merge rollback-at-$rollback_time into main" --body 'Created by Github action'
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
